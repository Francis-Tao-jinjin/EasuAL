import { EasuAL } from './BaseClass';
import { EasuALContext } from './Context';

export class EasuScheduler {
  private _frameId:number = 0;
  private _startTime:number = 0;
  private _context:EasuALContext;
  private _nextNoteTime:number = 0;

  public bpm:number = 120;
  public isStarted:boolean = false;

  constructor(context) {
    this._context = context;
    this._frame = this._frame.bind(this);
  }

  public initTicker() {
    if (this._frameId !== 0) {
      window.cancelAnimationFrame(this._frameId);
    }
    this._frameId = window.requestAnimationFrame(this._frame);
  }

  private _frame() {
    this.tick();
    this._frameId = window.requestAnimationFrame(this._frame);
  }

  public start() {
    if (this.isStarted === false) {
      this.isStarted = true;
      this._startTime = this._context._ctx.currentTime;
      this._nextNoteTime = 0;
    }
    return this;
  }

  public stop() {
    this.isStarted = false;
    return this;
  }

  public tick() {
    if (this.isStarted === false) {
      return;
    }
    // console.log(this._nextNoteTime, this.currentTime);
    while (this._nextNoteTime >= this.currentTime && this._nextNoteTime < this.currentTime + this.lookAheadTime) {
      this._scheduleNote(this._nextNoteTime);
      this._nextNoteTime += 60/this.bpm;
    }
  }

  public _scheduleNote(noteTime) {
    const osc = new EasuAL.EasuOscNode().toDestination();
    osc.start(noteTime + this._startTime);
    osc.stop(noteTime + this._startTime + 0.25);
  }

  get currentTime() {
    return this._context._ctx.currentTime - this._startTime;
  }

  get lookAheadTime() {
    return this._context.lookAhead;
  }
}

EasuAL.EasuScheduler = EasuScheduler;